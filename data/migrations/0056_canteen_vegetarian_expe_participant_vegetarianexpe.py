# Generated by Django 4.0.3 on 2022-04-01 08:55

import data.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('data', '0055_message'),
    ]

    operations = [
        migrations.AddField(
            model_name='canteen',
            name='vegetarian_expe_participant',
            field=models.BooleanField(blank=True, null=True, verbose_name="participnte à l'expérimentation repas végétariens"),
        ),
        migrations.CreateModel(
            name='VegetarianExpe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modification_date', models.DateTimeField(auto_now=True)),
                ('has_daily_vegetarian_offer', models.BooleanField(default=False, verbose_name="a déjà mis en place l'option végétarienne quotidienne")),
                ('daily_vegetarian_offer_start_date', models.DateField(blank=True, null=True, verbose_name="date de début de l'offre végétarienne quotidienne")),
                ('experimentation_start_date', models.DateField(blank=True, null=True, verbose_name="date de début d'expérimentation")),
                ('vegetarian_menu_percentage_t0', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Pourcentage de menus végétariens servis par rapport aux autres menus')),
                ('eggs_composition_t0', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name="Repas à base d'œufs (sur 20 repas)")),
                ('cheese_composition_t0', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name='Repas à base de fromage (sur 20 repas)')),
                ('soy_composition_home_made_t0', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name='Repas basés sur galettes/boulettes/nuggets fait maison à base de soja (sur 20 repas)')),
                ('soy_composition_ready_t0', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name='Repas basés sur galettes/boulettes/nuggets prêt à l’emploi à base de soja (sur 20 repas)')),
                ('soyless_composition_home_made_t0', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name='Repas basés sur galettes/boulettes/nuggets fait maison sans soja (sur 20 repas)')),
                ('soyless_composition_ready_t0', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name='Repas basés sur galettes/boulettes/nuggets prêt à l’emploi sans soja (sur 20 repas)')),
                ('cereal_legume_composition_t0', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name='Repas à base de céréales, légumineuses et légumes (sur 20 repas)')),
                ('waste_evolution_t0', models.CharField(blank=True, choices=[('higher', 'Oui, il y a plus de gaspillage'), ('lower', 'Non, il y a moins de gaspillage'), ('same', 'Pas de différence notable')], max_length=255, null=True, verbose_name='Évolution ressentie du gaspillage')),
                ('waste_evolution_percentage_t0', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Évolution du gaspillage suite au menu végétarien quotidien')),
                ('waste_vegetarian_not_served_t0', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Menus végétariens : Moyenne des pesées des excédents présentés aux convives et non servis')),
                ('waste_vegetarian_components_t0', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Menus végétariens : Moyenne des pesées des restes des assiettes')),
                ('waste_non_vegetarian_not_served_t0', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Menus non-végétariens : Moyenne des pesées des excédents présentés aux convives et non servis')),
                ('waste_non_vegetarian_components_t0', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Menus non-végétariens : Moyenne des pesées des restes des assiettes')),
                ('attendance_evolution_t0', models.CharField(blank=True, choices=[('higher', 'La fréquentation a augmenté'), ('lower', 'La fréquentation a diminué'), ('same', 'Pas de différence notable')], max_length=255, null=True, verbose_name='Évolution ressentie de la fréquentation')),
                ('attendance_evolution_percentage_t0', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Évolution de la fréquentation suite au menu végétarien quotidien')),
                ('vegetarian_cost_t0', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Coût moyen du repas végétarien (€ / assiette)')),
                ('non_vegetarian_cost_t0', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Coût moyen du repas non-végétarien (€ / assiette)')),
                ('cost_evolution_t0', models.CharField(blank=True, choices=[('higher', 'Le coût a augmenté'), ('lower', 'Le coût a diminué'), ('same', 'Pas de différence notable')], max_length=255, null=True, verbose_name='Évolution ressentie du coût')),
                ('cost_evolution_percentage_t0', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Évolution du coût en pourcentage')),
                ('satisfaction_guests_t0', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Satisfaction moyenne des convives')),
                ('satisfaction_guests_reasons_t0', data.fields.ChoiceArrayField(base_field=models.CharField(choices=[('choice', 'Liberté de choix (régime, culte...)'), ('taste', 'Goût et texture'), ('novelty', 'Nouveauté'), ('variety', 'Variété des recettes'), ('ignorance', 'Méconnaissance'), ('reject', 'Opposition de principe'), ('health', 'Impact sur la santé'), ('environment', "Impact sur l'environnement")], max_length=255), blank=True, null=True, size=None, verbose_name='Principales raisons évoquées par les convives')),
                ('satisfaction_staff_t0', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Satisfaction moyenne du personnel')),
                ('satisfaction_staff_reasons_t0', data.fields.ChoiceArrayField(base_field=models.CharField(choices=[('choice', 'Liberté de choix (régime, culte...)'), ('taste', 'Goût et texture'), ('novelty', 'Nouveauté'), ('variety', 'Variété des recettes'), ('ignorance', 'Méconnaissance'), ('reject', 'Opposition de principe'), ('health', 'Impact sur la santé'), ('environment', "Impact sur l'environnement")], max_length=255), blank=True, null=True, size=None, verbose_name='Principales raisons évoquées par le personnel')),
                ('has_used_recipee_documents_t0', models.BooleanField(blank=True, null=True, verbose_name='A utilisé un livret de recettes végétariennes (CNRC ou autres organismes)')),
                ('training_t0', models.BooleanField(blank=True, null=True, verbose_name='Formation spécifique des cuisiniers ou gestionnaires')),
                ('vegetarian_menu_percentage_t1', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Pourcentage de menus végétariens servis par rapport aux autres menus')),
                ('eggs_composition_t1', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name="Repas à base d'œufs (sur 20 repas)")),
                ('cheese_composition_t1', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name='Repas à base de fromage (sur 20 repas)')),
                ('soy_composition_home_made_t1', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name='Repas basés sur galettes/boulettes/nuggets fait maison à base de soja (sur 20 repas)')),
                ('soy_composition_ready_t1', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name='Repas basés sur galettes/boulettes/nuggets prêt à l’emploi à base de soja (sur 20 repas)')),
                ('soyless_composition_home_made_t1', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name='Repas basés sur galettes/boulettes/nuggets fait maison sans soja (sur 20 repas)')),
                ('soyless_composition_ready_t1', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name='Repas basés sur galettes/boulettes/nuggets prêt à l’emploi sans soja (sur 20 repas)')),
                ('cereal_legume_composition_t1', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name='Repas à base de céréales, légumineuses et légumes (sur 20 repas)')),
                ('waste_evolution_t1', models.CharField(blank=True, choices=[('higher', 'Oui, il y a plus de gaspillage'), ('lower', 'Non, il y a moins de gaspillage'), ('same', 'Pas de différence notable')], max_length=255, null=True, verbose_name='Évolution ressentie du gaspillage')),
                ('waste_evolution_percentage_t1', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Évolution du gaspillage suite au menu végétarien quotidien')),
                ('waste_vegetarian_not_served_t1', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Menus végétariens : Moyenne des pesées des excédents présentés aux convives et non servis')),
                ('waste_vegetarian_components_t1', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Menus végétariens : Moyenne des pesées des restes des assiettes')),
                ('waste_non_vegetarian_not_served_t1', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Menus non-végétariens : Moyenne des pesées des excédents présentés aux convives et non servis')),
                ('waste_non_vegetarian_components_t1', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Menus non-végétariens : Moyenne des pesées des restes des assiettes')),
                ('attendance_evolution_t1', models.CharField(blank=True, choices=[('higher', 'La fréquentation a augmenté'), ('lower', 'La fréquentation a diminué'), ('same', 'Pas de différence notable')], max_length=255, null=True, verbose_name='Évolution ressentie de la fréquentation')),
                ('attendance_evolution_percentage_t1', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Évolution de la fréquentation suite au menu végétarien quotidien')),
                ('vegetarian_cost_t1', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Coût moyen du repas végétarien (€ / assiette)')),
                ('non_vegetarian_cost_t1', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Coût moyen du repas non-végétarien (€ / assiette)')),
                ('cost_evolution_t1', models.CharField(blank=True, choices=[('higher', 'Le coût a augmenté'), ('lower', 'Le coût a diminué'), ('same', 'Pas de différence notable')], max_length=255, null=True, verbose_name='Évolution ressentie du coût')),
                ('cost_evolution_percentage_t1', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Évolution du coût en pourcentage')),
                ('satisfaction_guests_t1', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Satisfaction')),
                ('satisfaction_guests_reasons_t1', data.fields.ChoiceArrayField(base_field=models.CharField(choices=[('choice', 'Liberté de choix (régime, culte...)'), ('taste', 'Goût et texture'), ('novelty', 'Nouveauté'), ('variety', 'Variété des recettes'), ('ignorance', 'Méconnaissance'), ('reject', 'Opposition de principe'), ('health', 'Impact sur la santé'), ('environment', "Impact sur l'environnement")], max_length=255), blank=True, null=True, size=None, verbose_name='Principales raisons évoquées par les convives')),
                ('satisfaction_staff_t1', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Satisfaction')),
                ('satisfaction_staff_reasons_t1', data.fields.ChoiceArrayField(base_field=models.CharField(choices=[('choice', 'Liberté de choix (régime, culte...)'), ('taste', 'Goût et texture'), ('novelty', 'Nouveauté'), ('variety', 'Variété des recettes'), ('ignorance', 'Méconnaissance'), ('reject', 'Opposition de principe'), ('health', 'Impact sur la santé'), ('environment', "Impact sur l'environnement")], max_length=255), blank=True, null=True, size=None, verbose_name='Principales raisons évoquées par le personnel')),
                ('has_used_recipee_documents_t1', models.BooleanField(blank=True, null=True, verbose_name='A utilisé un livret de recettes végétariennes (CNRC ou autres organismes)')),
                ('training_t1', models.BooleanField(blank=True, null=True, verbose_name='Formation spécifique des cuisiniers ou gestionnaires')),
                ('canteen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.canteen', verbose_name='cantine')),
            ],
            options={
                'verbose_name': 'expérimentation repas végétariens quotidiens',
                'verbose_name_plural': 'expérimentations repas végétariens quotidiens',
            },
        ),
    ]
